@inject IBookContract BookContract
@inject IJSRuntime JSRuntime

@if (book.Id == 0)
{
    <h3>Create a new Book</h3>
}
else
{
    <h3>Edit '@book.Title'</h3>
}

<EditForm Model="book" OnSubmit="HandleSubmit">
    <div class="form-group">
        <label> Title </label>
        <InputText @bind-Value="book.Title" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label> Description </label>
        <InputText @bind-Value="book.Description" class="form-control"></InputText>
    </div>
    <div class="form-inline row">
        <label for="Category" class="col-sm-3 col-form-label">
            Category
        </label>
        <div class="col-sm-10">
            <InputSelect id="category" @bind-Value="categoryId" class="form-control">
                @foreach(var item in BookContract.categories)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="form-inline row">
        <label for="Publisher" class="col-sm-8 col-form-label">
            Publisher
        </label>
        <div class="col-sm-20">
            <InputSelect id="publisher" @bind-Value="publisherId" class="form-control">
                @foreach(var pub in BookContract.publishers)
                {
                    <option value="@pub.Id">@pub.Name</option>
                }
            </InputSelect>
        </div>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>


@code {
    [Parameter]
    public Book book { get; set; } = new Book();
    int categoryId = 1;
    int publisherId = 1;

    protected override async Task OnParametersSetAsync()
    {
        await BookContract.GetCategories();
        await BookContract.GetPublishers();
        //categoryId = book.Category.Id;
        //publisherId = book.publisher.Id;
    }

    async void HandleSubmit()
    {
        //book.Category = BookContract.categories.FirstOrDefault(c => c.Id == categoryId);
        book.Category = null;
        book.categoryId = categoryId;
        book.publisher = null;
        book.publisherId = publisherId;
        await JSRuntime.InvokeVoidAsync("console.log", book);

        if (book.Id == 0)
        {
            await BookContract.CreateBook(book);
        }
        else
        {
            await BookContract.UpdateBook(book, book.Id);
        }
    }
}
