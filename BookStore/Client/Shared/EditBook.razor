@inject IBookContract BookContract
@inject IJSRuntime JSRuntime
@using System.Linq

@if (book.Id == 0)
{
    <h3>Create a new Book</h3>
}
else
{
    <h3>Edit '@book.Title'</h3>
}

<EditForm Model="book" OnSubmit="HandleSubmit">
    <div class="form-group">
        <label> Title </label>
        <InputText @bind-Value="book.Title" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label> Description </label>
        <InputText @bind-Value="book.Description" class="form-control"></InputText>
    </div>
    <div class="form-inline row">
        <label for="Category" class="col-sm-1 col-form-label">
            Category
        </label>
        <div class="col-sm-10">
            <InputSelect id="category" @bind-Value="categoryId" class="form-control">
                @foreach (var item in BookContract.categories)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="form-inline row">
        <label for="Publisher" class="col-sm-1 col-form-label">
            Publisher
        </label>
        <div class="col-sm-10">
            <InputSelect id="publisher" @bind-Value="publisherId" class="form-control">
                @foreach (var pub in BookContract.publishers)
                {
                    <option value="@pub.Id">@pub.Name</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="form-group">
        <div class="form-group">
            <button type="button" class="btn btn-secondary"
                    @onclick="@(() =>AddAuthors(book))">
                Add Author
            </button>
        </div>
        @for (var i = 0; i < book.Authors.Count; i++)
        {
            var index = i;
            var author = book.Authors[i];

            <h5>Author @(i+1)</h5>

            <div class="form-group">
                <label>FirstName:</label>
                <InputText class="form-control" @bind-Value="author.Firstname" />
            </div>

            <div class="form-group">
                <label>LastName:</label>
                <InputText class="form-control" @bind-Value="author.Lastname" />
            </div>
            <button type="button" class="btn btn-danger"
                    @onclick="@(() => book.Authors.RemoveAt(index))">
                Remove
            </button>
        }
    </div>
    <button type="submit" class="btn btn-primary"><i class="oi oi-check"></i>&nbsp;&nbsp;&nbsp;Submit</button>
    <button class="btn btn-secondary" type="button" @onclick="Clear">Clear</button>
</EditForm>


@code {
    [Parameter]
    public Book book { get; set; } = new Book();
    int categoryId = 1;
    int publisherId = 1;

    protected override async Task OnParametersSetAsync()
    {
        await BookContract.GetCategories();
        await BookContract.GetPublishers();
    }

    async void HandleSubmit()
    {
        book.Category = null;
        book.categoryId = categoryId;
        book.publisher = null;
        book.publisherId = publisherId;

        await JSRuntime.InvokeVoidAsync("console.log", book);

        if (book.Id == 0)
        {
            await BookContract.CreateBook(book);
        }
        else
        {
            await BookContract.UpdateBook(book, book.Id);
        }
    }
    void AddAuthors(Book book)
    {

    }
    private void Clear()
    {
        book = new Book();
    }
}
